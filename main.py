#!/usr/bin/python3
import argparse
import subprocess
import xml.etree.ElementTree as ET

# Parse command-line arguments
parser = argparse.ArgumentParser(description='Enhanced Nmap Scanner')
parser.add_argument('host', help='Target host or IP address')
parser.add_argument('--output', '-o', help='Output file name for the scan results (default: nmap_out.txt)', default='nmap_out.txt')
args = parser.parse_args()

HOST = args.host
FILENAME_TXT = args.output
FILENAME_XML = 'nmap_out.xml'

# CHANGE THIS ACCORDING TO YOUR INSTALLATION
NMAP_PATH = '/usr/bin/nmap'

if __name__ == '__main__':
    try:
        print('[*] Starting simple scan...')
        # Constructing the command for the simple scan and splitting it into a list
        cmd = f'{NMAP_PATH} -p- -oX {FILENAME_XML} {HOST}'.split(' ')
        # Running the simple scan command and suppressing stdout
        subprocess.run(cmd, stdout=subprocess.DEVNULL)
        print('[+] Simple scan finished!')
    except Exception as e:
        # Handling exceptions if the simple scan fails
        print('[-] Simple scan failed, exiting program...')
        print(f'Error : {e}')
        exit(1)

    ports = '-'

    try:
        # Parsing the XML file generated by the simple scan
        tree = ET.parse(FILENAME_XML)
        root = tree.getroot()

        print('[*] Retrieving open ports for advanced scan...')
        # Extracting open port numbers from the XML data
        ports = ','.join([port.attrib['portid'] for port in root.findall('.//port')])
        print(f'[+] Ports retrieved : {ports}')
    except Exception as e:
        # Handling exceptions if unable to retrieve open ports from the XML file
        print('[*] Failed to retrieve open ports from XML file, scanning all the ports instead...')
        print(f'Error : {e}')

    try:
        print('[*] Deleting simple scan XML file...')
        # Constructing the command to delete the simple scan XML file and splitting it into a list
        cmd = f'rm {FILENAME_XML}'.split(' ')
        # Running the command to delete the simple scan XML file
        subprocess.run(cmd)
    except Exception as e:
        # Handling exceptions if unable to delete the simple scan XML file
        print('[-] Failed to delete simple scan XML file...')
        print(f'Error : {e}')

    try:
        print('[*] Starting advanced scan...')
        # Constructing the command for the advanced scan and splitting it into a list
        cmd = f'{NMAP_PATH} -sV -A -p{ports} {HOST} -oN {FILENAME_TXT}'.split(' ')
        # Running the advanced scan command
        subprocess.run(cmd)
    except Exception as e:
        # Handling exceptions if the advanced scan fails
        print('[-] Advanced scan failed, exiting program...')
        print(f'Error : {e}')
